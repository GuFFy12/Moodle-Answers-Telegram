import { Composer } from 'grammy';
import { Bot } from 'grammy';

import PrismaService from '../prisma.service';
import { MyContext } from '../types';
import { Command } from '../types';

export default class implements Command {
	composer: Composer<MyContext> = new Composer<MyContext>();

	constructor(public bot: Bot<MyContext>, public prisma: PrismaService) {
		this.composer.command(['statistic'], (ctx) => this.command(ctx));
		this.composer.hears(/(üìä )?–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞/, (ctx) => this.command(ctx));
	}

	async command(ctx: MyContext) {
		const sessionCount = await this.prisma.session.count({
			where: {
				checkedModulesCount: {
					gte: 1,
				},
			},
		});
		const userCount = await this.prisma.user.count();

		const answerAggregate = await this.prisma.answer.aggregate({
			_avg: {
				percent: true,
			},
		});

		const sessionAggregate = await this.prisma.session.aggregate({
			_sum: {
				checkedModulesCount: true,
			},
		});

		const courseCount = await this.prisma.course.count();
		const sectionCount = await this.prisma.section.count();
		const moduleCount = await this.prisma.module.count();
		const questionCount = await this.prisma.question.count();
		const answersCount = await this.prisma.answer.count();

		await ctx.reply(
			`üòÉ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${sessionCount} —É –±–æ—Ç–∞, ${userCount} —É —Å–∫—Ä–∏–ø—Ç–∞
üï∞ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞: ${sessionAggregate._sum.checkedModulesCount}
üíØ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–µ—Ä–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤: ${answerAggregate._avg.percent}
üóÇ –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${courseCount}
üìö –í—Å–µ–≥–æ —Ä–∞–∑–¥–µ–ª–æ–≤: ${sectionCount}
üìÉ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${moduleCount}
‚ùì –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questionCount}
üôã –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: ${answersCount}`,
			{ parse_mode: 'HTML' },
		);
	}
}
